
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace SDK.Models.Metadata
{
    using System;
using UnityEngine.Networking;
using Newtonsoft.Json;
using SDK.Utils;
    using System.Collections.Generic;
    public class DeleteVersionMetadataRequest
    {
    /// <summary>
    /// The ID of the Api to delete metadata for.
    /// </summary>
        
        [JsonProperty("apiID")]
        public string ApiID { get; set; }
        
    /// <summary>
    /// The key of the metadata to delete.
    /// </summary>
        
        [JsonProperty("metaKey")]
        public string MetaKey { get; set; }
        
    /// <summary>
    /// The value of the metadata to delete.
    /// </summary>
        
        [JsonProperty("metaValue")]
        public string MetaValue { get; set; }
        
    /// <summary>
    /// The version ID of the Api to delete metadata for.
    /// </summary>
        
        [JsonProperty("versionID")]
        public string VersionID { get; set; }
        
        internal static UnityWebRequest BuildHttpRequestMessage(string operationId, DeleteVersionMetadataRequest value, string baseUrl)
        {
            if("deleteVersionMetadata" == operationId)
            {
                
                var apiID = PathParamSerializer.Serialize("simple", false, value.ApiID);
                
                var metaKey = PathParamSerializer.Serialize("simple", false, value.MetaKey);
                
                var metaValue = PathParamSerializer.Serialize("simple", false, value.MetaValue);
                
                var versionID = PathParamSerializer.Serialize("simple", false, value.VersionID);var urlString = baseUrl + $"/v1/apis/{apiID}/version/{versionID}/metadata/{metaKey}/{metaValue}";// #request-debugging Delete 
                var message = UnityWebRequest.Delete(urlString);
                return message;
            }
            throw new ArgumentException($"Attempt to build UnityWebRequest for invalid operationId [{operationId}] for request type [DeleteVersionMetadataRequest]");
        }
    }

}