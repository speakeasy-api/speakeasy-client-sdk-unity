
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace SDK.Models.Shared
{
    using System;
using UnityEngine.Networking;
using System.Text;
using Newtonsoft.Json;
using SDK.Utils;
    using System.Collections.Generic;
/// <summary>
/// A plugin is a short script that is run against ingested requests
/// </summary>
    public class Plugin
    {
        
        [JsonProperty("code")]
        public string Code { get; set; }
        
        
        [JsonProperty("created_at")]
        public DateTime? CreatedAt { get; set; }
        
        
        [JsonProperty("eval_hash")]
        public string? EvalHash { get; set; }
        
        
        [JsonProperty("plugin_id")]
        public string PluginId { get; set; }
        
        
        [JsonProperty("title")]
        public string Title { get; set; }
        
        
        [JsonProperty("updated_at")]
        public DateTime? UpdatedAt { get; set; }
        
        
        [JsonProperty("workspace_id")]
        public string WorkspaceId { get; set; }
        
        internal static UnityWebRequest BuildHttpRequestMessage(string operationId, Plugin value, string baseUrl)
        {
            if("upsertPlugin" == operationId)
            {
                string json = JsonConvert.SerializeObject(value, new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new IsoDateTimeSerializer(), new EnumSerializer() }});var urlString = baseUrl + "/v1/plugins";
                // #request-debugging put TODO: work in progress
                var bytes = System.Text.Encoding.UTF8.GetBytes(json);
                var message = UnityWebRequest.Put(urlString, bytes);
                return message;
            }
            throw new ArgumentException($"Attempt to build UnityWebRequest for invalid operationId [{operationId}] for request type [Plugin]");
        }
    }

}